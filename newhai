private extractMatchedTransactions(pdfData: { Pages: { Texts: any[] }[] }): { transactionNo: string; matchedTime: string; dealTime: string }[] {
  const matchedRecords: { transactionNo: string; matchedTime: string; dealTime: string }[] = [];

  pdfData.Pages.forEach((page) => {
    const textChunks: string[] = [];

    page.Texts.forEach((textObj) => {
      textObj.R.forEach((run: { T: string }) => {
        const decodedText = decodeURIComponent(run.T);
        textChunks.push(decodedText);
      });
    });

    const fullText = textChunks.join(" ");
    console.log("Full Text is", fullText);

    /**
     * Match blocks like:
     * 202506300005241 - TM-TM PNBG TRADING ABHINAV Offer T+1 11:37 Yes
     * Placed Pending - 11:45:08
     * ...
     * Matched Matched 202506300002270 15:32:47
     */
    const regex = /(\d{15}) - TM-TM .*?(?:Bid|Offer) T\+1 (\d{2}:\d{2}) .*?Placed Pending\s*-\s*(\d{2}:\d{2}:\d{2})[\s\S]*?Matched Matched\s+(2025\d{11})/g;

    let match;
    while ((match = regex.exec(fullText)) !== null) {
      const internalId = match[1]; // optional
      const dealTime = match[2];   // e.g. 11:37
      const matchedTime = match[3]; // from Pending block: 11:45:08 ✅
      const transactionNo = match[4]; // final transaction: 202506300002270 ✅

      matchedRecords.push({
        transactionNo,
        matchedTime,
        dealTime,
      });
    }
  });

  console.log("Matched Records is", matchedRecords);
  return matchedRecords;
}
const regex = /(\d{15}) - TM-TM .*?(?:Bid|Offer) T\+1 (\d{2}:\d{2}) .*?Placed Pending\s*-\s*(\d{2}:\d{2}:\d{2})[\s\S]*?Matched Matched\s+(2025\d{11})/g;

===================================
private extractMatchedTransactions(pdfData: { Pages: { Texts: any[] }[] }): { transactionNo: string; matchedTime: string; dealTime: string }[] {
  const matchedRecords: { transactionNo: string; matchedTime: string; dealTime: string }[] = [];

  pdfData.Pages.forEach((page) => {
    const textChunks: string[] = [];

    page.Texts.forEach((textObj) => {
      textObj.R.forEach((run: { T: string }) => {
        const decodedText = decodeURIComponent(run.T);
        textChunks.push(decodedText);
      });
    });

    const fullText = textChunks.join(" ");
    console.log("Full Text is", fullText);

    // 1. Extract Placed Pending records into a map keyed by transactionNo
    const placedPendingRegex = /(\d{15}) - TM-TM .*?(?:Bid|Offer) T\+1 (\d{2}:\d{2}) .*?Placed Pending\s*-\s*(\d{2}:\d{2}:\d{2})/g;
    const placedPendingMap = new Map<string, { dealTime: string; pendingTime: string }>();

    let match;
    while ((match = placedPendingRegex.exec(fullText)) !== null) {
      const transactionNo = match[1];
      const dealTime = match[2];
      const pendingTime = match[3];
      placedPendingMap.set(transactionNo, { dealTime, pendingTime });
    }

    // 2. Extract Matched Matched records
    const matchedMatchedRegex = /Matched Matched\s+(2025\d{11})\s+(\d{2}:\d{2}:\d{2})/g;

    while ((match = matchedMatchedRegex.exec(fullText)) !== null) {
      const transactionNo = match[1];
      const matchedTime = match[2];

      const placed = placedPendingMap.get(transactionNo);
      if (placed) {
        matchedRecords.push({
          transactionNo,
          dealTime: placed.dealTime,
          matchedTime,
        });
      }
    }
  });

  console.log("Matched Records is", matchedRecords);
  return matchedRecords;
}
======================================================
private extractMatchedTransactions(pdfData: { Pages: { Texts: any[] }[] }): { transactionNo: string; matchedTime: string; dealTime: string }[] {
  const matchedRecords: { transactionNo: string; matchedTime: string; dealTime: string }[] = [];

  pdfData.Pages.forEach((page) => {
    const textChunks: string[] = [];

    page.Texts.forEach((textObj) => {
      textObj.R.forEach((run: { T: string }) => {
        const decodedText = decodeURIComponent(run.T);
        textChunks.push(decodedText);
      });
    });

    const fullText = textChunks.join(" ");
    console.log("Full Text is", fullText);

    // Extract all placed pending blocks (dealTime and pendingTime)
    const placedPendingRegex = /(\d{15}) - TM-TM .*?(?:Bid|Offer) T\+1 (\d{2}:\d{2}) .*?Placed Pending\s*-\s*(\d{2}:\d{2}:\d{2})/g;
    const placedPendings: { dealTime: string; pendingTime: string }[] = [];

    let match;
    while ((match = placedPendingRegex.exec(fullText)) !== null) {
      const dealTime = match[2];
      const pendingTime = match[3];
      placedPendings.push({ dealTime, pendingTime });
    }

    // Extract all matched matched blocks (transactionNo and matchedTime)
    const matchedMatchedRegex = /Matched Matched\s+(2025\d{11})\s+(\d{2}:\d{2}:\d{2})/g;
    const matchedBlocks: { transactionNo: string; matchedTime: string }[] = [];

    while ((match = matchedMatchedRegex.exec(fullText)) !== null) {
      const transactionNo = match[1];
      const matchedTime = match[2];
      matchedBlocks.push({ transactionNo, matchedTime });
    }

    // Now pair placedPending and matched in order (assuming same count and order)
    const len = Math.min(placedPendings.length, matchedBlocks.length);
    for (let i = 0; i < len; i++) {
      matchedRecords.push({
        transactionNo: matchedBlocks[i].transactionNo,
        matchedTime: placedPendings[i].pendingTime,
        dealTime: placedPendings[i].dealTime,
      });
    }
  });

  console.log("Matched Records is", matchedRecords);
  return matchedRecords;
}
