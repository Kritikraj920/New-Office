private extractShortSaleRecords(pdfData: { Pages: { Texts: any[] }[] }): Partial<ShortSaleRecord>[] {
  const records: Partial<ShortSaleRecord>[] = [];
  const dealMap: Record<string, { dealTime: string; matchedTime: string }> = {};

  const textChunks: string[] = [];

  pdfData.Pages.forEach((page) => {
    page.Texts.forEach((textObj) => {
      textObj.R.forEach((run: { T: string }) => {
        const decodedText = decodeURIComponent(run.T);
        textChunks.push(decodedText);
      });
    });
  });

  for (let i = 0; i < textChunks.length; i++) {
    const line = textChunks[i];

    // Step 1: Extract from Placed Pending block
    if (line.includes("Placed Pending")) {
      const prevLine = textChunks[i - 1];
      const dealId = prevLine.match(/^(\d{15})/)?.[1];
      const dealTime = prevLine.match(/T\+1\s(\d{2}:\d{2})/)?.[1];
      const matchedTime = line.match(/(\d{2}:\d{2}:\d{2})/)?.[1];

      if (dealId && dealTime && matchedTime) {
        dealMap[dealId] = { dealTime, matchedTime };
      }
    }

    // Step 2: Extract final Transaction No from Matched Matched block
    if (line.includes("Matched Matched")) {
      const prevLine = textChunks[i - 1]; // Line with dealId
      const nextLine = textChunks[i + 1]; // Line with transactionNo
      const dealId = prevLine.match(/^(\d{15})/)?.[1];
      const transactionNo = nextLine.match(/^(\d{15})/)?.[1];

      if (dealId && transactionNo && dealMap[dealId]) {
        const { dealTime, matchedTime } = dealMap[dealId];

        records.push({
          transactionNo,
          DealTime: dealTime,
          MatchedTime: matchedTime
        });
      }
    }
  }

  return records;
}
